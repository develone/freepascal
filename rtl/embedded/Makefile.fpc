#
#   Makefile.fpc for Free Pascal Embedded RTL
#

[package]
main=rtl

[target]
loaders=$(LOADERS)


# not all targets include enough features to build all units so
# the common units which are not compiled for all CPUs are stored in
# CPU_SPECIFIC_COMMON_UNITS
units=$(SYSTEMUNIT) $(CPU_UNITS) uuchar objpas iso7185 extpas strings heapmgr consoleio sortbase $(CPU_SPECIFIC_COMMON_UNITS) \
# macpas iso7185 strings
       dos \
       ctypes \
       charset cpall \
       sysconst
#implicitunits=exeinfo \
#      cp1250 cp1251 cp1252 cp1253 cp1254 cp1255 cp1256 cp1257 cp1258 \
#      cp437 cp646 cp737 cp775 cp850 cp852 cp855 cp856 cp857 cp860 cp861 cp862 \
#      cp863 cp864 cp865 cp866 cp869 cp874 cp3021 cp8859_1 cp8859_2 cp8859_3 cp8859_4 \
#      cp8859_5 cp8859_6 cp8859_7 cp8859_8 cp8859_9 cp8859_10 cp8859_11 \
#      cp8859_13 cp8859_14 cp8859_15 cp8859_16 cpkoi8_r cpkoi8_u

#rsts=math rtlconsts varutils typinfo variants classes sysconst dateutil

[require]
nortl=y

[install]
fpcpackage=y

[default]
fpcdir=../..
target=embedded

[compiler]
includedir=$(INC) $(PROCINC)
sourcedir=$(INC) $(PROCINC) $(COMMON) $(ARCH)

[prerules]
RTL=..
INC=$(RTL)/inc
COMMON=$(RTL)/common
PROCINC=$(RTL)/$(CPU_TARGET)
UNITPREFIX=rtl
SYSTEMUNIT=system
LOADERS=
ifeq ($(ARCH),mipsel)
ifeq ($(SUBARCH),pic32mx)
override LOADERS=startup
endif
endif

ifdef RELEASE
override FPCOPT+=-Ur
endif

# Always include rtl.cfg config file for i8086
ifeq ($(ARCH),i8086)
override FPCOPT+=@rtl.cfg
endif

CPU_UNITS=
SYSINIT_UNITS=
CPU_SPECIFIC_COMMON_UNITS=

ifeq ($(ARCH),arm)
CPU_SPECIFIC_COMMON_UNITS=sysutils math classes fgl macpas typinfo types rtlconsts getopts lineinfo
ifeq ($(SUBARCH),armv7m)
CPU_UNITS=lm3fury lm3tempest  thumb2_bare
CPU_UNITS+=stm32f10x_cl stm32f10x_conn stm32f10x_hd stm32f10x_ld stm32f10x_md stm32f10x_xl
CPU_UNITS+=stm32f100xb stm32f100xe stm32f101x6 stm32f101xb stm32f101xe stm32f101xg stm32f102x6 stm32f102xb stm32f103x6 stm32f103xb stm32f103xe stm32f103xg stm32f105xc stm32f107xc 
CPU_UNITS+=stm32l100xb stm32l100xba stm32l100xc stm32l151xb stm32l151xba stm32l151xc stm32l151xca stm32l151xd stm32l151xdx stm32l151xe stm32l152xb stm32l152xba stm32l152xc stm32l152xca stm32l152xd stm32l152xdx stm32l152xe stm32l162xc stm32l162xca stm32l162xd stm32l162xdx stm32l162xe 
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),armv7em)
CPU_UNITS=lm4f120 xmc4500 mk20d5 mk20d7 mk22f51212 mk64f12  thumb2_bare
CPU_UNITS+=stm32f301x8 stm32f302x8 stm32f302xc stm32f302xe stm32f303x8 stm32f303xc stm32f303xe stm32f318xx stm32f328xx stm32f334x8 stm32f358xx stm32f373xc stm32f378xx stm32f398xx 
CPU_UNITS+=stm32f401xc stm32f401xe stm32f405xx stm32f407xx stm32f410cx stm32f410rx stm32f410tx stm32f411xe stm32f412cx stm32f412rx stm32f412vx stm32f412zx stm32f413xx stm32f415xx stm32f417xx stm32f423xx stm32f427xx stm32f429xx stm32f437xx stm32f439xx stm32f446xx stm32f469xx stm32f479xx 
CPU_UNITS+=stm32g431xx stm32g441xx stm32g471xx stm32g473xx stm32g474xx stm32g483xx stm32g484xx stm32g491xx stm32g4a1xx 
CPU_UNITS+=stm32h723xx stm32h725xx stm32h730xx stm32h730xxq stm32h733xx stm32h735xx stm32h742xx stm32h743xx stm32h745xx stm32h747xx stm32h750xx stm32h753xx stm32h755xx stm32h757xx stm32h7a3xx stm32h7a3xxq stm32h7b0xx stm32h7b0xxq stm32h7b3xx stm32h7b3xxq 
CPU_UNITS+=stm32l412xx stm32l422xx stm32l431xx stm32l432xx stm32l433xx stm32l442xx stm32l443xx stm32l451xx stm32l452xx stm32l462xx stm32l471xx stm32l475xx stm32l476xx stm32l485xx stm32l486xx stm32l496xx stm32l4a6xx stm32l4p5xx stm32l4q5xx stm32l4r5xx stm32l4r7xx stm32l4r9xx stm32l4s5xx stm32l4s7xx stm32l4s9xx 
CPU_UNITS+=stm32wb30xx stm32wb35xx stm32wb50xx stm32wb55xx stm32wb5mxx 
CPU_UNITS+=samd51g19a samd51j19a samd51p19a
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),armv4t)
CPU_UNITS=lpc21x4 at91sam7x256 sc32442b
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),armv4)
CPU_UNITS=lpc21x4 at91sam7x256 sc32442b
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),armv6m)
CPU_UNITS=lpc8xx lpc11xx lpc122x  cortexm0
CPU_UNITS+=stm32f030x6 stm32f030x8 stm32f030xc stm32f031x6 stm32f038xx stm32f042x6 stm32f048xx stm32f051x8 stm32f058xx stm32f070x6 stm32f070xb stm32f071xb stm32f072xb stm32f078xx stm32f091xc stm32f098xx 
CPU_UNITS+=stm32g030xx stm32g031xx stm32g041xx stm32g050xx stm32g051xx stm32g061xx stm32g070xx stm32g071xx stm32g081xx stm32g0b0xx stm32g0b1xx stm32g0c1xx 
CPU_UNITS+=stm32l010x4 stm32l010x6 stm32l010x8 stm32l010xb stm32l011xx stm32l021xx stm32l031xx stm32l041xx stm32l051xx stm32l052xx stm32l053xx stm32l062xx stm32l063xx stm32l071xx stm32l072xx stm32l073xx stm32l081xx stm32l082xx stm32l083xx
CPU_UNITS+=rp2040 samd21e18a samd21g18a samd21j18a
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),armv7a)
CPU_UNITS=allwinner_a20 raspi2
CPU_UNITS_DEFINED=1
endif
ifeq ($(CPU_UNITS_DEFINED),)
$(error No CPUs enabled for given SUBARCH, pass either a SUBARCH or set CPU_UNITS_DEFINED=1 if you know what you are doing)
endif
endif

ifeq ($(ARCH),avr)
CPU_SPECIFIC_COMMON_UNITS=intrinsics
ifeq ($(SUBARCH),avrtiny)
CPU_UNITS=attiny4 attiny5 attiny9 attiny10 attiny20 attiny40 attiny102 attiny104
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avr1)
CPU_UNITS=attiny11 attiny12 attiny15 attiny28
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avr2)
CPU_UNITS=attiny26
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avr25)
CPU_UNITS=attiny13 attiny13a attiny24 attiny24a attiny25 attiny43u \
          attiny44 attiny44a attiny45 attiny48 attiny84a attiny84 attiny85 \
          attiny87 attiny88 attiny261 attiny261a attiny441 attiny461 attiny461a attiny828 \
          attiny841 attiny861 attiny861a attiny2313 attiny2313a attiny4313
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avr35)
CPU_UNITS=at90usb82 at90usb162 atmega8u2 atmega16u2 atmega32u2 attiny167 attiny1634
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avr4)
CPU_UNITS=at90pwm1 at90pwm2b at90pwm3b at90pwm81 ata6285 ata6286 atmega8 \
          atmega8a atmega8hva atmega48 atmega48a atmega48p atmega48pa \
          atmega48pb atmega88 atmega88a atmega88p atmega88pa atmega88pb \
          atmega8515 atmega8535
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avr5)
CPU_UNITS=avrsim at90can32 at90can64 at90pwm161 at90pwm216 at90pwm316 \
          at90usb646 at90usb647 atmega16 atmega16a atmega16hva atmega16hvb atmega16hvbrevb atmega16m1 \
          atmega16u4 atmega32 atmega32a atmega32c1 atmega32hvb atmega32hvbrevb atmega32m1 \
          atmega32u4 atmega64 atmega64a atmega64c1 atmega64hve2 atmega64m1 atmega64rfr2 atmega162 \
          atmega164a atmega164p atmega164pa atmega165a atmega165p atmega165pa \
          atmega168 atmega168a atmega168p atmega168pa atmega168pb atmega169a atmega169p \
          atmega169pa atmega324a atmega324p atmega324pa atmega324pb atmega325 atmega325a \
          atmega325p atmega325pa atmega328 atmega328p atmega328pb atmega329 atmega329a \
          atmega329p atmega329pa atmega406 atmega640 atmega644 atmega644a atmega644p \
          atmega644pa atmega644rfr2 atmega645 atmega645a atmega645p atmega649 atmega649a \
          atmega649p atmega3250 atmega3250a atmega3250p atmega3250pa atmega3290 \
          atmega3290a atmega3290p atmega3290pa atmega6450 atmega6450a \
          atmega6450p atmega6490 atmega6490a atmega6490p
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avr51)
CPU_UNITS=at90can128 at90usb1286 at90usb1287 atmega128 atmega128a atmega128rfa1 atmega128rfr2 \
          atmega1280 atmega1281 atmega1284 atmega1284p atmega1284rfr2
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avr6)
CPU_UNITS=avrsim atmega256rfr2 atmega2560 atmega2561 atmega2564rfr2
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),avrxmega3)
CPU_UNITS=atmega808 atmega809 atmega1608 atmega1609 atmega3208 atmega3209 \
          atmega4808 atmega4809 attiny202 attiny204 attiny212 attiny214 \
          attiny402 attiny404 attiny406 attiny412 attiny414 attiny416 \
          attiny416auto attiny417 attiny804 attiny806 attiny807 attiny814 \
          attiny816 attiny817 attiny1604 attiny1606 attiny1607 attiny1614 \
          attiny1616 attiny1617 attiny1624 attiny1626 attiny1627 attiny3214 attiny3216 attiny3217
CPU_UNITS_DEFINED=1
endif
ifeq ($(CPU_UNITS_DEFINED),)
$(error No CPUs enabled for given SUBARCH, pass either a SUBARCH or set CPU_UNITS_DEFINED=1 if you know what you are doing)
endif
endif

ifeq ($(ARCH),i386)
CPU_SPECIFIC_COMMON_UNITS=sysutils math classes fgl macpas typinfo types rtlconsts getopts lineinfo
CPU_UNITS=multiboot
CPU_UNITS_DEFINED=1
ifeq ($(CPU_UNITS_DEFINED),)
$(error No CPUs enabled for given SUBARCH, pass either a SUBARCH or set CPU_UNITS_DEFINED=1 if you know what you are doing)
endif
endif

ifeq ($(ARCH),x86_64)
CPU_SPECIFIC_COMMON_UNITS=sysutils math classes fgl macpas typinfo types rtlconsts getopts lineinfo
# CPU_UNITS=multiboot
endif

ifeq ($(ARCH),m68k)
CPU_SPECIFIC_COMMON_UNITS=sysutils math
# CPU_UNITS=multiboot
endif

ifeq ($(ARCH),mipsel)
CPU_SPECIFIC_COMMON_UNITS=sysutils math classes fgl macpas typinfo types rtlconsts getopts lineinfo
ifeq ($(SUBARCH),pic32mx)
CPU_UNITS=pic32mx1xxfxxxb pic32mx2xxfxxxb pic32mx1xxfxxxc pic32mx2xxfxxxc pic32mx1xxfxxxd pic32mx2xxfxxxd pic32mx7x5fxxxl pic32mx7x5fxxxh
CPU_UNITS_DEFINED=1
endif
ifeq ($(CPU_UNITS_DEFINED),)
$(error No CPUs enabled for given SUBARCH, pass either a SUBARCH or set CPU_UNITS_DEFINED=1 if you know what you are doing)
endif
endif

ifeq ($(ARCH),riscv32)
CPU_SPECIFIC_COMMON_UNITS=sysutils math classes fgl macpas typinfo types rtlconsts getopts lineinfo
ifeq ($(SUBARCH),rv32imac)
override FPCOPT+=-Cprv32imac
CPU_UNITS=fe310g000 fe310g002 gd32vf103xx
CPU_UNITS_DEFINED=1
endif
ifeq ($(SUBARCH),rv32i)
override FPCOPT+=-Cprv32i
CPU_UNITS=
CPU_UNITS_DEFINED=1
endif
ifeq ($(CPU_UNITS_DEFINED),)
$(error No CPUs enabled for given SUBARCH, pass either a SUBARCH or set CPU_UNITS_DEFINED=1 if you know what you are doing)
endif
endif

ifeq ($(ARCH),riscv64)
CPU_SPECIFIC_COMMON_UNITS=sysutils math classes fgl macpas typinfo types rtlconsts getopts lineinfo
CPU_UNITS=
CPU_UNITS_DEFINED=1
ifeq ($(CPU_UNITS_DEFINED),)
$(error No CPUs enabled for given SUBARCH, pass either a SUBARCH or set CPU_UNITS_DEFINED=1 if you know what you are doing)
endif
endif

ifeq ($(ARCH),xtensa)
CPU_SPECIFIC_COMMON_UNITS=sysutils math classes fgl macpas typinfo types rtlconsts getopts lineinfo
ifeq ($(SUBARCH),lx106)
CPU_UNITS=esp8266
CPU_UNITS_DEFINED=1
endif
ifeq ($(CPU_UNITS_DEFINED),)
$(error No CPUs enabled for given SUBARCH, pass either a SUBARCH or set CPU_UNITS_DEFINED=1 if you know what you are doing)
endif
endif

# Paths
OBJPASDIR=$(RTL)/objpas
GRAPHDIR=$(INC)/graph

[rules]
# .NOTPARALLEL:
# Get the system independent include file names.
# This will set the following variables :
# SYSINCNAMES
include $(INC)/makefile.inc
SYSINCDEPS=$(addprefix $(INC)/,$(SYSINCNAMES))

# Get the processor dependent include file names.
# This will set the following variables :
# CPUINCNAMES
include $(PROCINC)/makefile.cpu
SYSCPUDEPS=$(addprefix $(PROCINC)/,$(CPUINCNAMES))

# Put system unit dependencies together.
SYSDEPS=$(SYSINCDEPS) $(SYSCPUDEPS)

#
# Loaders
#

startup$(OEXT) : $(CPU_TARGET)/startup.s
        $(AS) $(ASTARGET) -o $(UNITTARGETDIRPREFIX)startup$(OEXT) $(CPU_TARGET)/startup.s  -mabi=32 -march=pic32mx -mtune=pic32mx -W -EL  -msym32

#
# Base Units (System, strings, os-dependent-base-unit)
#

$(SYSTEMUNIT)$(PPUEXT) : $(SYSTEMUNIT).pp $(SYSDEPS) $(INC)/softfpu.pp
        $(COMPILER) $(FPC_SYSTEM_OPT) -Us -Sg $(SYSTEMUNIT).pp @system.cfg $(REDIR)

uuchar$(PPUEXT): $(INC)/uuchar.pp $(SYSTEMUNIT)$(PPUEXT)
	$(COMPILER) $<

objpas$(PPUEXT): $(OBJPASDIR)/objpas.pp $(INC)/except.inc $(SYSTEMUNIT)$(PPUEXT)
        $(COMPILER) -I$(OBJPASDIR) $(OBJPASDIR)/objpas.pp $(REDIR)

strings$(PPUEXT) : $(INC)/strings.pp $(INC)/stringsi.inc \
                   $(PROCINC)/strings.inc $(PROCINC)/stringss.inc \
                   $(SYSTEMUNIT)$(PPUEXT)
        $(COMPILER) $<


#
# System Dependent Units
#

#ports$(PPUEXT) : ports.pas objpas$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
#        $(COMPILER) $<

#doscalls$(PPUEXT) : doscalls.pas strings$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
#        $(COMPILER) $<

consoleio$(PPUEXT) : consoleio.pp $(SYSTEMUNIT)$(PPUEXT)
	$(COMPILER) $<

heapmgr$(PPUEXT) : heapmgr.pp $(SYSTEMUNIT)$(PPUEXT)
	$(COMPILER) $<


#
# TP7 Compatible RTL Units
#

dos$(PPUEXT) : dos.pp $(INC)/fexpand.inc $(INC)/filerec.inc $(INC)/textrec.inc $(INC)/dosh.inc $(INC)/dos.inc objpas$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
        $(COMPILER) $<

#crt$(PPUEXT) : crt.pas $(INC)/textrec.inc $(SYSTEMUNIT)$(PPUEXT)
#        $(COMPILER) $<

objects$(PPUEXT) : $(INC)/objects.pp dos$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
        $(COMPILER) $<

#printer$(PPUEXT) : printer.pas $(INC)/textrec.inc $(SYSTEMUNIT)$(PPUEXT)
#        $(COMPILER) $<

#graph$(PPUEXT) : graph.pp
#        $(COMPILER) $<

#
# Delphi Compatible Units
#

sysutils$(PPUEXT) : sysutils.pp $(wildcard $(OBJPASDIR)/sysutils/*.inc) \
                    objpas$(PPUEXT) sysconst$(PPUEXT) heapmgr$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
        $(COMPILER) -Fi$(OBJPASDIR)/sysutils sysutils.pp

classes$(PPUEXT) : classes.pp $(wildcard $(OBJPASDIR)/classes/*.inc) \
                   sysutils$(PPUEXT) typinfo$(PPUEXT) rtlconsts$(PPUEXT) types$(PPUEXT) sortbase$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
        $(COMPILER) -Fi$(OBJPASDIR)/classes classes.pp

typinfo$(PPUEXT): $(OBJPASDIR)/typinfo.pp objpas$(PPUEXT) sysutils$(PPUEXT) rtlconsts$(PPUEXT)
        $(COMPILER) -Sg $(OBJPASDIR)/typinfo.pp $(REDIR)

math$(PPUEXT): $(OBJPASDIR)/math.pp objpas$(PPUEXT) sysutils$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
        $(COMPILER) $(OBJPASDIR)/math.pp $(REDIR)

varutils$(PPUEXT) : $(OBJPASDIR)/cvarutil.inc $(OBJPASDIR)/varutils.inc \
                    $(OBJPASDIR)/varutilh.inc varutils.pp $(SYSTEMUNIT)$(PPUEXT)
        $(COMPILER) -I$(OBJPASDIR) varutils.pp $(REDIR)

fmtbcd$(PPUEXT) : $(OBJPASDIR)/fmtbcd.pp objpas$(PPUEXT) sysutils$(PPUEXT) variants$(PPUEXT) classes$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
        $(COMPILER) $(OBJPASDIR)/fmtbcd.pp

types$(PPUEXT) : $(OBJPASDIR)/types.pp math$(PPUEXT) objpas$(PPUEXT) math$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
        $(COMPILER) $(OBJPASDIR)/types.pp

rtlconsts$(PPUEXT) : $(OBJPASDIR)/rtlconsts.pp $(OBJPASDIR)/rtlconst.inc objpas$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
        $(COMPILER) $(OBJPASDIR)/rtlconsts.pp

sysconst$(PPUEXT) : $(OBJPASDIR)/sysconst.pp objpas$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
        $(COMPILER) $(OBJPASDIR)/sysconst.pp

fgl$(PPUEXT): $(OBJPASDIR)/fgl.pp objpas$(PPUEXT) types$(PPUEXT) system$(PPUEXT) sysutils$(PPUEXT) sortbase$(PPUEXT)
        $(COMPILER) -Sg $(OBJPASDIR)/fgl.pp $(REDIR)

dateutil$(PPUEXT) : $(OBJPASDIR)/dateutil.pp $(SYSTEMUNIT)$(PPUEXT)
        $(COMPILER) -I$(OBJPASDIR) $(OBJPASDIR)/dateutil.pp

#
# Mac Pascal Model
#

macpas$(PPUEXT) : $(INC)/macpas.pp objpas$(PPUEXT) math$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
        $(COMPILER) $(INC)/macpas.pp $(REDIR)

#
# Other system-independent RTL Units
#

ucomplex$(PPUEXT): $(INC)/ucomplex.pp math$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
	$(COMPILER) $<

getopts$(PPUEXT) : $(INC)/getopts.pp $(SYSTEMUNIT)$(PPUEXT)
	$(COMPILER) $<

heaptrc$(PPUEXT) : $(INC)/heaptrc.pp $(SYSTEMUNIT)$(PPUEXT)
        $(COMPILER) -Sg $(INC)/heaptrc.pp $(REDIR)

lineinfo$(PPUEXT) : $(INC)/lineinfo.pp strings$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
	$(COMPILER) $(INC)/lineinfo.pp

charset$(PPUEXT) : $(INC)/charset.pp objpas$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
	$(COMPILER) $<

cpall$(PPUEXT): $(RTL)/charmaps/cpall.pas system$(PPUEXT) charset$(PPUEXT)
        $(COMPILER) -Fu$(INC) -Fi$(RTL)/charmaps $(RTL)/charmaps/cpall.pas

iso7185$(PPUEXT) : $(INC)/iso7185.pp $(SYSTEMUNIT)$(PPUEXT)
        $(COMPILER) $(INC)/iso7185.pp

extpas$(PPUEXT) : $(INC)/extpas.pp dos$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
        $(COMPILER) $(INC)/extpas.pp

#
# Unit specific rules
#

define CPU_UNITS_RULE
ifeq ($(ARCH),avr)
$(1)$(PPUEXT): $(ARCH)/$(1).pp intrinsics$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
else
$(1)$(PPUEXT): $(ARCH)/$(1).pp $(SYSTEMUNIT)$(PPUEXT)
endif
endef

$(foreach unit,$(CPU_UNITS),$(eval $(call CPU_UNITS_RULE,$(unit))))

$(addsuffix $(PPUEXT),$(CPU_UNITS)):
	$(COMPILER) -g $<

#
# Other $(SYSTEMUNIT)-dependent RTL Units
#

errors$(PPUEXT) : $(UNIXINC)/errors.pp strings$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
	$(COMPILER) $(UNIXINC)/errors.pp

callspec$(PPUEXT) : $(INC)/callspec.pp $(SYSTEMUNIT)$(PPUEXT)
	$(COMPILER) $(INC)/callspec.pp

cmem$(PPUEXT) : $(INC)/cmem.pp $(SYSTEMUNIT)$(PPUEXT)
	$(COMPILER) $(INC)/cmem.pp

cthreads$(PPUEXT) : $(UNIXINC)/cthreads.pp $(SYSTEMUNIT)$(PPUEXT) unix$(PPUEXT) sysutils$(PPUEXT) baseunix$(PPUEXT) initc$(PPUEXT) dl$(PPUEXT)
	$(COMPILER) $(UNIXINC)/cthreads.pp

cwstring$(PPUEXT) : $(UNIXINC)/cwstring.pp $(SYSTEMUNIT)$(PPUEXT) sysutils$(PPUEXT) baseunix$(PPUEXT) unix$(PPUEXT) unixtype$(PPUEXT) ctypes$(PPUEXT) dynlibs$(PPUEXT) unixcp$(PPUEXT)
	$(COMPILER) $(UNIXINC)/cwstring.pp

ctypes$(PPUEXT) :  $(INC)/ctypes.pp $(SYSTEMUNIT)$(PPUEXT)
	$(COMPILER) $(INC)/ctypes.pp

fpcylix$(PPUEXT) : fpcylix.pp cthreads$(PPUEXT) cwstring$(PPUEXT) dynlibs$(PPUEXT) objpas$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
	$(COMPILER) fpcylix.pp

intrinsics$(PPUEXT) : $(PROCINC)/intrinsics.pp $(SYSTEMUNIT)$(PPUEXT)
	$(COMPILER) $(PROCINC)/intrinsics.pp

sortbase$(PPUEXT) : $(INC)/sortbase.pp objpas$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
	$(COMPILER) $(INC)/sortbase.pp

# AVR specific units

avrsim$(PPUEXT): $(ARCH)/avrsim.pp heapmgr$(PPUEXT) consoleio$(PPUEXT) $(SYSTEMUNIT)$(PPUEXT)
	$(COMPILER) $(ARCH)/avrsim.pp
<<<<<<< HEAD
 
=======
>>>>>>> e6eda6fd5860e4567d8865f76819042768762860

